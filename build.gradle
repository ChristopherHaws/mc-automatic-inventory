plugins {
    id 'kr.entree.spigradle' version '2.4.2'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
}

group = project.property("group")
version = project.property("version")

repositories {
    mavenLocal()
    mavenCentral()
    spigot()
    maven {
        name = 'spigotmc-repo'
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation 'com.github.Exlll.ConfigLib:configlib-paper:v4.2.0'
    implementation 'org.bstats:bstats-bukkit:3.0.0'
    compileOnly spigot(project.property("spigotApiVersion"))
}

spigot {
    name = project.property("pluginName")
    authors = [project.property("authors")]
    apiVersion = project.property("spigotApiVersion")
    load = STARTUP
    commands {
        debugai {
            description 'Debug command for AutomaticInventory.'
            permission 'automaticinventory.debug'
            usage '/debugai'
        }
        autosort {
            description 'Toggles auto-sorting options.'
            permission 'automaticinventory.sortchests'
            usage '/AutoSort'
        }
        depositall {
            aliases 'da', 'dumpitems', 'dumploot', 'depositloot'
            description 'Deposits your non-hotbar inventory into any nearby chests containing matching items.'
            permission 'automaticinventory.depositall'
            usage '/DepositAll'
        }
        quickdeposit {
            description 'Toggles quick deposit (shift+left click on chests).'
            permission 'automaticinventory.quickdeposit'
            usage '/quickdeposit'
        }
        autorefill {
            description 'Toggles quto refill, which refills your hotbar slots when items are depleted or break.'
            permission 'automaticinventory.refillstacks'
            usage '/autorefill'
        }
    }
    permissions {
        'automaticinventory.admin.*' {
            description 'Grants all administrative privileges.'
            children = ['automaticinventory.debugai': true]
        }
        'automaticinventory.user.*' {
            description 'Grants all user privileges.'
            children = [
                    'automaticinventory.sortinventory': true,
                    'automaticinventory.sortchests': true,
                    'automaticinventory.refillstacks': true,
                    'automaticinventory.quickdeposit': true,
                    'automaticinventory.depositall': true,
            ]
        }
        'automaticinventory.debugai' {
            description 'Grants permission to use /DebugAI.'
            defaults 'op'
        }
        'automaticinventory.sortinventory' {
            description 'Grants permission to auto-sort personal inventory.'
            defaults 'true'
        }
        'automaticinventory.sortchests' {
            description 'Grants permission to auto-sort chest content.'
            defaults 'true'
        }
        'automaticinventory.refillstacks' {
            description 'Grants permission to auto-refill depleted hotbar stacks.'
            defaults 'true'
        }
        'automaticinventory.quickdeposit' {
            description 'Grants permission to auto-deposit matching items into a chest with shift-right-click.'
            defaults 'true'
        }
        'automaticinventory.depositall' {
            description 'Grants permission to use /DepositAll.'
            defaults 'true'
        }
    }
    debug {
        eula = true
        buildVersion = project.property("mcVersion")
    }
}

shadowJar {
    relocate 'org.bstats', 'dev.chaws.automaticinventory'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks {
    assemble.dependsOn(shadowJar)
}

// Not sure why this is needed to debug
// https://github.com/spigradle/spigradle/issues/84
//tasks.withType(Copy).all { duplicatesStrategy 'exclude' }

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
